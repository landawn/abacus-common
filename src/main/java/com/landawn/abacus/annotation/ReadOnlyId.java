/*
 * Copyright (C) 2018 HaiYang Li
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
 * in compliance with the License. You may obtain a copy of the License at
 *
 * https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License
 * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing permissions and limitations under
 * the License.
 */

package com.landawn.abacus.annotation;

import static java.lang.annotation.ElementType.FIELD;
import static java.lang.annotation.ElementType.TYPE;
import static java.lang.annotation.RetentionPolicy.RUNTIME;

import java.lang.annotation.Documented;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;

/**
 * Marks a field or type as a read-only identifier that should not be modified during persistence operations.
 * This annotation combines the semantics of @Id and @ReadOnly, indicating that the annotated element
 * represents a primary key that is managed by the database and should not be set or updated by the application.
 * 
 * <p><b>Common scenarios:</b></p>
 * <ul>
 *   <li>Auto-increment primary keys generated by the database</li>
 *   <li>UUID or sequence-based identifiers assigned by the database</li>
 *   <li>Natural keys that should never change after creation</li>
 *   <li>Composite keys where some or all components are read-only</li>
 * </ul>
 * 
 * <p><b>Behavior:</b></p>
 * <ul>
 *   <li>INSERT operations: The ID field is excluded, letting the database generate the value</li>
 *   <li>UPDATE operations: The ID field is excluded, preventing accidental key changes</li>
 *   <li>SELECT operations: The ID field is included normally for queries and lookups</li>
 * </ul>
 * 
 * <p><b>Usage patterns:</b></p>
 * <ul>
 *   <li>On fields: Marks a single field as a read-only identifier</li>
 *   <li>On types: Can specify composite read-only keys via the value array</li>
 * </ul>
 * 
 * <p><b>Example usage:</b></p>
 * <pre>
 * // Single read-only ID
 * {@literal @}Entity
 * public class User {
 *     {@literal @}ReadOnlyId
 *     private Long id;  // Auto-generated by database
 *     
 *     {@literal @}Column
 *     private String username;
 * }
 * 
 * // Composite read-only ID on type
 * {@literal @}Entity
 * {@literal @}ReadOnlyId({"company_id", "department_id"})
 * public class Employee {
 *     private Long companyId;     // Set once, never updated
 *     private Long departmentId;  // Set once, never updated
 *     private Long employeeNum;   // Generated by database
 * }
 * </pre>
 * 
 * @author HaiYang Li
 * @since 2018
 * @see Id
 * @see ReadOnly
 */
@Documented
@Target(value = { FIELD, /* METHOD, */ TYPE })
@Retention(RUNTIME)
public @interface ReadOnlyId {

    /**
     * Specifies the column names that form the read-only primary key.
     * For simple primary keys on fields, this can be left empty.
     * For composite keys on types, list all the column names that comprise the key.
     * 
     * <p><b>Examples:</b></p>
     * <pre>
     * {@literal @}ReadOnlyId  // Uses field name
     * private Long id;
     * 
     * {@literal @}ReadOnlyId({"order_id", "line_number"})  // Composite key
     * public class OrderLine { }
     * </pre>
     * 
     * @return array of column names forming the read-only identifier, empty array for field-level usage
     */
    String[] value() default {};

}
