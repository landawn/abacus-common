/*
 * Generated by Abacus.
 */
package com.landawn.abacus.entity.hbase;

import java.sql.Timestamp;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Set;
import java.util.SortedMap;

import com.landawn.abacus.annotation.Type;
import com.landawn.abacus.util.HBaseColumn;
import com.landawn.abacus.util.N;

public class Account implements HbasePNL.AccountPNL {
    private long id;
    private Map<Long, HBaseColumn<String>> gui;
    private SortedMap<Long, HBaseColumn<String>> emailAddress;
    private Name name;
    private HBaseColumn<Integer> status;
    private LinkedHashMap<Long, HBaseColumn<Timestamp>> lastUpdateTime;
    private Map<Long, HBaseColumn<Timestamp>> createdTime;
    private AccountContact contact;
    private Set<String> strSet;
    private Map<String, Long> strMap;

    public Account() {
    }

    public Account(long id) {
        this();

        setId(id);
    }

    public Account(Map<Long, HBaseColumn<String>> gui, SortedMap<Long, HBaseColumn<String>> emailAddress, Name name, HBaseColumn<Integer> status,
            LinkedHashMap<Long, HBaseColumn<Timestamp>> lastUpdateTime, Map<Long, HBaseColumn<Timestamp>> createdTime, AccountContact contact,
            Set<String> strSet, Map<String, Long> strMap) {
        this();

        setGUI(gui);
        setEmailAddress(emailAddress);
        setName(name);
        setStatus(status);
        setLastUpdateTime(lastUpdateTime);
        setCreatedTime(createdTime);
        setContact(contact);
        setStrSet(strSet);
        setStrMap(strMap);
    }

    public Account(long id, Map<Long, HBaseColumn<String>> gui, SortedMap<Long, HBaseColumn<String>> emailAddress, Name name, HBaseColumn<Integer> status,
            LinkedHashMap<Long, HBaseColumn<Timestamp>> lastUpdateTime, Map<Long, HBaseColumn<Timestamp>> createdTime, AccountContact contact,
            Set<String> strSet, Map<String, Long> strMap) {
        this();

        setId(id);
        setGUI(gui);
        setEmailAddress(emailAddress);
        setName(name);
        setStatus(status);
        setLastUpdateTime(lastUpdateTime);
        setCreatedTime(createdTime);
        setContact(contact);
        setStrSet(strSet);
        setStrMap(strMap);
    }

    @Type("long")
    public long getId() {
        return id;
    }

    public Account setId(long id) {
        this.id = id;

        return this;
    }

    @Type("Map<Long, HBaseColumn<String>>")
    public Map<Long, HBaseColumn<String>> getGUI() {
        return gui;
    }

    public Account setGUI(Map<Long, HBaseColumn<String>> gui) {
        this.gui = gui;

        return this;
    }

    /**
     * Returns the (first) column or an empty column if it's null.
     *
     * @return 
     */
    public HBaseColumn<String> gui() {
        return (HBaseColumn<String>) (N.isEmpty(gui) ? HBaseColumn.emptyOf(String.class) : gui.values().iterator().next());
    }

    public Account setGUI(String value) {
        setGUI(HBaseColumn.valueOf(value));

        return this;
    }

    public Account setGUI(String value, long version) {
        setGUI(HBaseColumn.valueOf(value, version));

        return this;
    }

    public Account setGUI(HBaseColumn<String> hbaseColumn) {
        if (gui == null) {
            gui = N.newInstance(java.util.Map.class);
        } else {
            gui.clear();
        }

        gui.put(hbaseColumn.version(), hbaseColumn);

        return this;
    }

    public Account addGUI(String value) {
        addGUI(HBaseColumn.valueOf(value));

        return this;
    }

    public Account addGUI(String value, long version) {
        addGUI(HBaseColumn.valueOf(value, version));

        return this;
    }

    public Account addGUI(HBaseColumn<String> hbaseColumn) {
        if (gui == null) {
            gui = N.newInstance(java.util.Map.class);
        }

        gui.put(hbaseColumn.version(), hbaseColumn);

        return this;
    }

    @Type("SortedMap<Long, HBaseColumn<String>>")
    public SortedMap<Long, HBaseColumn<String>> getEmailAddress() {
        return emailAddress;
    }

    public Account setEmailAddress(SortedMap<Long, HBaseColumn<String>> emailAddress) {
        this.emailAddress = emailAddress;

        return this;
    }

    /**
     * Returns the (first) column or an empty column if it's null.
     *
     * @return 
     */
    public HBaseColumn<String> emailAddress() {
        return (HBaseColumn<String>) (N.isEmpty(emailAddress) ? HBaseColumn.emptyOf(String.class) : emailAddress.values().iterator().next());
    }

    public Account setEmailAddress(String value) {
        setEmailAddress(HBaseColumn.valueOf(value));

        return this;
    }

    public Account setEmailAddress(String value, long version) {
        setEmailAddress(HBaseColumn.valueOf(value, version));

        return this;
    }

    public Account setEmailAddress(HBaseColumn<String> hbaseColumn) {
        if (emailAddress == null) {
            emailAddress = new java.util.TreeMap<>(HBaseColumn.DESC_HBASE_VERSION_COMPARATOR);
        } else {
            emailAddress.clear();
        }

        emailAddress.put(hbaseColumn.version(), hbaseColumn);

        return this;
    }

    public Account addEmailAddress(String value) {
        addEmailAddress(HBaseColumn.valueOf(value));

        return this;
    }

    public Account addEmailAddress(String value, long version) {
        addEmailAddress(HBaseColumn.valueOf(value, version));

        return this;
    }

    public Account addEmailAddress(HBaseColumn<String> hbaseColumn) {
        if (emailAddress == null) {
            emailAddress = new java.util.TreeMap<>(HBaseColumn.DESC_HBASE_VERSION_COMPARATOR);
        }

        emailAddress.put(hbaseColumn.version(), hbaseColumn);

        return this;
    }

    @Type("com.landawn.abacus.entity.hbase.Name")
    public Name getName() {
        return name;
    }

    public Account setName(Name name) {
        this.name = name;

        return this;
    }

    @Type("HBaseColumn<Integer>")
    public HBaseColumn<Integer> getStatus() {
        return status;
    }

    public Account setStatus(HBaseColumn<Integer> status) {
        this.status = status;

        return this;
    }

    /**
     * Returns the (first) column or an empty column if it's null.
     *
     * @return 
     */
    public HBaseColumn<Integer> status() {
        return (HBaseColumn<Integer>) (this.status == null ? HBaseColumn.emptyOf(int.class) : status);
    }

    public Account setStatus(int value) {
        setStatus(HBaseColumn.valueOf(value));

        return this;
    }

    public Account setStatus(int value, long version) {
        setStatus(HBaseColumn.valueOf(value, version));

        return this;
    }

    @Type("LinkedHashMap<Long, HBaseColumn<Timestamp>>")
    public LinkedHashMap<Long, HBaseColumn<Timestamp>> getLastUpdateTime() {
        return lastUpdateTime;
    }

    public Account setLastUpdateTime(LinkedHashMap<Long, HBaseColumn<Timestamp>> lastUpdateTime) {
        this.lastUpdateTime = lastUpdateTime;

        return this;
    }

    /**
     * Returns the (first) column or an empty column if it's null.
     *
     * @return 
     */
    public HBaseColumn<Timestamp> lastUpdateTime() {
        return (HBaseColumn<Timestamp>) (N.isEmpty(lastUpdateTime) ? HBaseColumn.emptyOf(Timestamp.class) : lastUpdateTime.values().iterator().next());
    }

    public Account setLastUpdateTime(Timestamp value) {
        setLastUpdateTime(HBaseColumn.valueOf(value));

        return this;
    }

    public Account setLastUpdateTime(Timestamp value, long version) {
        setLastUpdateTime(HBaseColumn.valueOf(value, version));

        return this;
    }

    public Account setLastUpdateTime(HBaseColumn<Timestamp> hbaseColumn) {
        if (lastUpdateTime == null) {
            lastUpdateTime = N.newInstance(java.util.LinkedHashMap.class);
        } else {
            lastUpdateTime.clear();
        }

        lastUpdateTime.put(hbaseColumn.version(), hbaseColumn);

        return this;
    }

    public Account addLastUpdateTime(Timestamp value) {
        addLastUpdateTime(HBaseColumn.valueOf(value));

        return this;
    }

    public Account addLastUpdateTime(Timestamp value, long version) {
        addLastUpdateTime(HBaseColumn.valueOf(value, version));

        return this;
    }

    public Account addLastUpdateTime(HBaseColumn<Timestamp> hbaseColumn) {
        if (lastUpdateTime == null) {
            lastUpdateTime = N.newInstance(java.util.LinkedHashMap.class);
        }

        lastUpdateTime.put(hbaseColumn.version(), hbaseColumn);

        return this;
    }

    @Type("Map<Long, HBaseColumn<Timestamp>>")
    public Map<Long, HBaseColumn<Timestamp>> getCreatedTime() {
        return createdTime;
    }

    public Account setCreatedTime(Map<Long, HBaseColumn<Timestamp>> createdTime) {
        this.createdTime = createdTime;

        return this;
    }

    /**
     * Returns the (first) column or an empty column if it's null.
     *
     * @return 
     */
    public HBaseColumn<Timestamp> createdTime() {
        return (HBaseColumn<Timestamp>) (N.isEmpty(createdTime) ? HBaseColumn.emptyOf(Timestamp.class) : createdTime.values().iterator().next());
    }

    public Account setCreatedTime(Timestamp value) {
        setCreatedTime(HBaseColumn.valueOf(value));

        return this;
    }

    public Account setCreatedTime(Timestamp value, long version) {
        setCreatedTime(HBaseColumn.valueOf(value, version));

        return this;
    }

    public Account setCreatedTime(HBaseColumn<Timestamp> hbaseColumn) {
        if (createdTime == null) {
            createdTime = N.newInstance(java.util.Map.class);
        } else {
            createdTime.clear();
        }

        createdTime.put(hbaseColumn.version(), hbaseColumn);

        return this;
    }

    public Account addCreatedTime(Timestamp value) {
        addCreatedTime(HBaseColumn.valueOf(value));

        return this;
    }

    public Account addCreatedTime(Timestamp value, long version) {
        addCreatedTime(HBaseColumn.valueOf(value, version));

        return this;
    }

    public Account addCreatedTime(HBaseColumn<Timestamp> hbaseColumn) {
        if (createdTime == null) {
            createdTime = N.newInstance(java.util.Map.class);
        }

        createdTime.put(hbaseColumn.version(), hbaseColumn);

        return this;
    }

    @Type("com.landawn.abacus.entity.hbase.AccountContact")
    public AccountContact getContact() {
        return contact;
    }

    public Account setContact(AccountContact contact) {
        this.contact = contact;

        return this;
    }

    @Type("Set<String>")
    public Set<String> getStrSet() {
        return strSet;
    }

    public Account setStrSet(Set<String> strSet) {
        this.strSet = strSet;

        return this;
    }

    @Type("Map<String, Long>")
    public Map<String, Long> getStrMap() {
        return strMap;
    }

    public Account setStrMap(Map<String, Long> strMap) {
        this.strMap = strMap;

        return this;
    }

    @Override
    public int hashCode() {
        int h = 17;
        h = 31 * h + Objects.hashCode(id);
        h = 31 * h + Objects.hashCode(gui);
        h = 31 * h + Objects.hashCode(emailAddress);
        h = 31 * h + Objects.hashCode(name);
        h = 31 * h + Objects.hashCode(status);
        h = 31 * h + Objects.hashCode(lastUpdateTime);
        h = 31 * h + Objects.hashCode(createdTime);
        h = 31 * h + Objects.hashCode(contact);
        h = 31 * h + Objects.hashCode(strSet);
        return 31 * h + Objects.hashCode(strMap);
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (obj instanceof Account other) {
            return Objects.equals(id, other.id) && Objects.equals(gui, other.gui) && Objects.equals(emailAddress, other.emailAddress)
                    && Objects.equals(name, other.name) && Objects.equals(status, other.status) && Objects.equals(lastUpdateTime, other.lastUpdateTime)
                    && Objects.equals(createdTime, other.createdTime) && Objects.equals(contact, other.contact) && Objects.equals(strSet, other.strSet)
                    && Objects.equals(strMap, other.strMap);
        }

        return false;
    }

    @Override
    public String toString() {
        return "{id=" + Objects.toString(id) + ", gui=" + Objects.toString(gui) + ", emailAddress=" + Objects.toString(emailAddress) + ", name="
                + Objects.toString(name) + ", status=" + Objects.toString(status) + ", lastUpdateTime=" + Objects.toString(lastUpdateTime) + ", createdTime="
                + Objects.toString(createdTime) + ", contact=" + Objects.toString(contact) + ", strSet=" + Objects.toString(strSet) + ", strMap="
                + Objects.toString(strMap) + "}";
    }
}
