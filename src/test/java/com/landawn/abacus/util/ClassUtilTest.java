package com.landawn.abacus.util;

import static org.junit.jupiter.api.Assertions.assertEquals;

import java.lang.reflect.Method;
import java.util.concurrent.Callable;

import org.junit.jupiter.api.Test;

import com.landawn.abacus.parser.ParserUtil;
import com.landawn.abacus.parser.ParserUtil.BeanInfo;
import com.landawn.abacus.parser.ParserUtil.PropInfo;
import com.landawn.abacus.util.function.Predicate;

public class ClassUtilTest {

    @Test
    public void test_innerClass() {

        final OuterClass myOuter = new OuterClass();
        final OuterClass.InnerClass myInner = myOuter.new InnerClass();
        System.out.println(myInner.y + myOuter.x);

        N.println(ClassUtil.getClassName(myInner.getClass()));

        final OuterClass.InnerClass myInner2 = myOuter.new InnerClass();
        assertEquals(myInner2.getClass(), myInner.getClass());
    }

    class OuterClass {
        int x = 10;

        class InnerClass {
            int y = 5;
        }
    }

    @Test
    public void test_setPropValue() {
        final BeanInfo beanInfo = ParserUtil.getBeanInfo(Account.class);
        final PropInfo propInfo = beanInfo.getPropInfo("contact.address");
        N.println(propInfo);

        final Account account = new Account();
        Beans.setPropValue(account, "contact.address", "address1");
        Beans.setPropValue(account, "devices.name", "device1");
        Beans.setPropValue(account, "devices.model", "model1");
    }

    @Test
    public void test_getPropNameList() {
        N.println(Beans.getPropNameList(Account.class));

        N.println(Beans.getPropNames(Account.class, N.asList("id", "gui")));

        N.println(Beans.getPropNames(Account.class, N.asSet("id", "gui")));
    }

    @Test
    public void test_getTypeArgumentsByMethod() {
        Method method = Beans.getPropGetMethod(Entity_2.class, "getAutoGeneratedClassMap");

        N.println(ClassUtil.getParameterizedTypeNameByMethod(method));

        method = Beans.getPropSetMethod(Entity_2.class, "setAutoGeneratedClassMap");

        N.println(ClassUtil.getParameterizedTypeNameByMethod(method));

        method = Beans.getPropGetMethod(Entity_2.class, "gui");

        N.println(ClassUtil.getParameterizedTypeNameByMethod(method));

        method = Beans.getPropSetMethod(Entity_2.class, "gui");

        N.println(ClassUtil.getParameterizedTypeNameByMethod(method));

        method = Beans.getPropGetMethod(Entity_2.class, "intType");

        N.println(ClassUtil.getParameterizedTypeNameByMethod(method));

        method = Beans.getPropSetMethod(Entity_2.class, "intType");

        N.println(ClassUtil.getParameterizedTypeNameByMethod(method));
    }

    @Test
    public void test_02() {
        N.println(ClassUtil.getClassesByPackage("com.landawn.abacus", true, true));
    }

    @Test
    public void test_01() {
        N.println(ClassUtil.getAllSuperclasses(C.class));
        N.println(ClassUtil.getAllInterfaces(C.class));
        N.println(ClassUtil.getAllSuperTypes(C.class));
    }

    public abstract static class A<T> implements Predicate<T> {

    }

    public abstract class B<T> extends A<T> implements Callable<T> {

    }

    public abstract class C<T> extends B<T> implements Callable<T> {

    }

}
