package com.landawn.abacus.properties;


import java.util.Map;

import com.landawn.abacus.util.Properties;


/**
 * Auto-generated by Abacus.
 */
public class MyProperties extends Properties<String, Object> {

    public String getStrProp2() {
        return (String) super.get("strProp2");
    }

    public void setStrProp2(String strProp2) {
        super.put("strProp2", strProp2);
    }

    public void removeStrProp2() {
        super.remove("strProp2");
    }

    public MProps4 getMProps4() {
        return (MProps4) super.get("mProps4");
    }

    public void setMProps4(MProps4 mProps4) {
        super.put("mProps4", mProps4);
    }

    public void removeMProps4() {
        super.remove("mProps4");
    }

    public MProps3 getMProps3() {
        return (MProps3) super.get("mProps3");
    }

    public void setMProps3(MProps3 mProps3) {
        super.put("mProps3", mProps3);
    }

    public void removeMProps3() {
        super.remove("mProps3");
    }

    public String getIntProp2() {
        return (String) super.get("intProp2");
    }

    public void setIntProp2(String intProp2) {
        super.put("intProp2", intProp2);
    }

    public void removeIntProp2() {
        super.remove("intProp2");
    }

    public String getIntProp1() {
        return (String) super.get("intProp1");
    }

    public void setIntProp1(String intProp1) {
        super.put("intProp1", intProp1);
    }

    public void removeIntProp1() {
        super.remove("intProp1");
    }

    public String getIntProp0() {
        return (String) super.get("intProp0");
    }

    public void setIntProp0(String intProp0) {
        super.put("intProp0", intProp0);
    }

    public void removeIntProp0() {
        super.remove("intProp0");
    }

    public MProps2 getMProps2() {
        return (MProps2) super.get("mProps2");
    }

    public void setMProps2(MProps2 mProps2) {
        super.put("mProps2", mProps2);
    }

    public void removeMProps2() {
        super.remove("mProps2");
    }

    public MProps1 getMProps1() {
        return (MProps1) super.get("mProps1");
    }

    public void setMProps1(MProps1 mProps1) {
        super.put("mProps1", mProps1);
    }

    public void removeMProps1() {
        super.remove("mProps1");
    }

    public String getStrProp() {
        return (String) super.get("strProp");
    }

    public void setStrProp(String strProp) {
        super.put("strProp", strProp);
    }

    public void removeStrProp() {
        super.remove("strProp");
    }

    @Deprecated
    @Override
    public MyProperties set(String propName, Object propValue) {
        return (MyProperties) super.set(propName, propValue);
    }

    @Deprecated
    @Override
    public Object put(String propName, Object propValue) {
        return super.put(propName, propValue);
    }

    @Deprecated
    @Override
    public void putAll(Map<? extends String, ? extends Object> m) {
        super.putAll(m);
    }

    @Deprecated
    @Override
    public Object remove(Object propName) {
        return super.remove(propName);
    }

    public static class MProps4 extends Properties<String, Object> {

        public String getStrProp2() {
            return (String) super.get("strProp2");
        }

        public void setStrProp2(String strProp2) {
            super.put("strProp2", strProp2);
        }

        public void removeStrProp2() {
            super.remove("strProp2");
        }

        public String getIntProp2() {
            return (String) super.get("intProp2");
        }

        public void setIntProp2(String intProp2) {
            super.put("intProp2", intProp2);
        }

        public void removeIntProp2() {
            super.remove("intProp2");
        }

        public String getIntProp1() {
            return (String) super.get("intProp1");
        }

        public void setIntProp1(String intProp1) {
            super.put("intProp1", intProp1);
        }

        public void removeIntProp1() {
            super.remove("intProp1");
        }

        public String getIntProp0() {
            return (String) super.get("intProp0");
        }

        public void setIntProp0(String intProp0) {
            super.put("intProp0", intProp0);
        }

        public void removeIntProp0() {
            super.remove("intProp0");
        }

        public String getStrProp() {
            return (String) super.get("strProp");
        }

        public void setStrProp(String strProp) {
            super.put("strProp", strProp);
        }

        public void removeStrProp() {
            super.remove("strProp");
        }

        @Deprecated
        @Override
        public MProps4 set(String propName, Object propValue) {
            return (MProps4) super.set(propName, propValue);
        }

        @Deprecated
        @Override
        public Object put(String propName, Object propValue) {
            return super.put(propName, propValue);
        }

        @Deprecated
        @Override
        public void putAll(Map<? extends String, ? extends Object> m) {
            super.putAll(m);
        }

        @Deprecated
        @Override
        public Object remove(Object propName) {
            return super.remove(propName);
        }
    }

    public static class MProps3 extends Properties<String, Object> {

        public String getStrProp2() {
            return (String) super.get("strProp2");
        }

        public void setStrProp2(String strProp2) {
            super.put("strProp2", strProp2);
        }

        public void removeStrProp2() {
            super.remove("strProp2");
        }

        public String getIntProp2() {
            return (String) super.get("intProp2");
        }

        public void setIntProp2(String intProp2) {
            super.put("intProp2", intProp2);
        }

        public void removeIntProp2() {
            super.remove("intProp2");
        }

        public String getIntProp1() {
            return (String) super.get("intProp1");
        }

        public void setIntProp1(String intProp1) {
            super.put("intProp1", intProp1);
        }

        public void removeIntProp1() {
            super.remove("intProp1");
        }

        public String getIntProp0() {
            return (String) super.get("intProp0");
        }

        public void setIntProp0(String intProp0) {
            super.put("intProp0", intProp0);
        }

        public void removeIntProp0() {
            super.remove("intProp0");
        }

        public String getStrProp() {
            return (String) super.get("strProp");
        }

        public void setStrProp(String strProp) {
            super.put("strProp", strProp);
        }

        public void removeStrProp() {
            super.remove("strProp");
        }

        @Deprecated
        @Override
        public MProps3 set(String propName, Object propValue) {
            return (MProps3) super.set(propName, propValue);
        }

        @Deprecated
        @Override
        public Object put(String propName, Object propValue) {
            return super.put(propName, propValue);
        }

        @Deprecated
        @Override
        public void putAll(Map<? extends String, ? extends Object> m) {
            super.putAll(m);
        }

        @Deprecated
        @Override
        public Object remove(Object propName) {
            return super.remove(propName);
        }
    }

    public static class MProps2 extends Properties<String, Object> {

        public String getStrProp2() {
            return (String) super.get("strProp2");
        }

        public void setStrProp2(String strProp2) {
            super.put("strProp2", strProp2);
        }

        public void removeStrProp2() {
            super.remove("strProp2");
        }

        public String getIntProp2() {
            return (String) super.get("intProp2");
        }

        public void setIntProp2(String intProp2) {
            super.put("intProp2", intProp2);
        }

        public void removeIntProp2() {
            super.remove("intProp2");
        }

        public String getIntProp1() {
            return (String) super.get("intProp1");
        }

        public void setIntProp1(String intProp1) {
            super.put("intProp1", intProp1);
        }

        public void removeIntProp1() {
            super.remove("intProp1");
        }

        public String getIntProp0() {
            return (String) super.get("intProp0");
        }

        public void setIntProp0(String intProp0) {
            super.put("intProp0", intProp0);
        }

        public void removeIntProp0() {
            super.remove("intProp0");
        }

        public String getStrProp() {
            return (String) super.get("strProp");
        }

        public void setStrProp(String strProp) {
            super.put("strProp", strProp);
        }

        public void removeStrProp() {
            super.remove("strProp");
        }

        @Deprecated
        @Override
        public MProps2 set(String propName, Object propValue) {
            return (MProps2) super.set(propName, propValue);
        }

        @Deprecated
        @Override
        public Object put(String propName, Object propValue) {
            return super.put(propName, propValue);
        }

        @Deprecated
        @Override
        public void putAll(Map<? extends String, ? extends Object> m) {
            super.putAll(m);
        }

        @Deprecated
        @Override
        public Object remove(Object propName) {
            return super.remove(propName);
        }
    }

    public static class MProps1 extends Properties<String, Object> {

        public String getStrProp2() {
            return (String) super.get("strProp2");
        }

        public void setStrProp2(String strProp2) {
            super.put("strProp2", strProp2);
        }

        public void removeStrProp2() {
            super.remove("strProp2");
        }

        public String getIntProp2() {
            return (String) super.get("intProp2");
        }

        public void setIntProp2(String intProp2) {
            super.put("intProp2", intProp2);
        }

        public void removeIntProp2() {
            super.remove("intProp2");
        }

        public String getIntProp1() {
            return (String) super.get("intProp1");
        }

        public void setIntProp1(String intProp1) {
            super.put("intProp1", intProp1);
        }

        public void removeIntProp1() {
            super.remove("intProp1");
        }

        public String getIntProp0() {
            return (String) super.get("intProp0");
        }

        public void setIntProp0(String intProp0) {
            super.put("intProp0", intProp0);
        }

        public void removeIntProp0() {
            super.remove("intProp0");
        }

        public String getStrProp() {
            return (String) super.get("strProp");
        }

        public void setStrProp(String strProp) {
            super.put("strProp", strProp);
        }

        public void removeStrProp() {
            super.remove("strProp");
        }

        @Deprecated
        @Override
        public MProps1 set(String propName, Object propValue) {
            return (MProps1) super.set(propName, propValue);
        }

        @Deprecated
        @Override
        public Object put(String propName, Object propValue) {
            return super.put(propName, propValue);
        }

        @Deprecated
        @Override
        public void putAll(Map<? extends String, ? extends Object> m) {
            super.putAll(m);
        }

        @Deprecated
        @Override
        public Object remove(Object propName) {
            return super.remove(propName);
        }
    }
}
